// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Cliente {
  id            Int               @id @default(autoincrement())
  nombres       String
  apellidos     String
  alias         String
  telefono      String
  correo        String
  dui           String

  contratos     Contrato[]
  configs       ConfigCPE[]
  pagos         PagoCliente[]
  facturas      Factura[]
  movimientos   Movimiento[]       // Relación con Movimiento

  usuario       Usuario?          @relation("ClienteUsuario")
}

model Usuario {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  nombre       String
  activo       Boolean  @default(false)
  rolId        Int
  clienteId    Int?     @unique // Relación uno a uno con Cliente

  cliente      Cliente? @relation("ClienteUsuario", fields: [clienteId], references: [id])
  rol          Rol      @relation(fields: [rolId], references: [id])
}

model Rol {
  id          Int          @id @default(autoincrement())
  nombre      String       @unique
  esAdmin     Boolean      @default(false) // Nuevo campo para rol administrador
  usuarios    Usuario[]    // Relación uno a muchos con Usuario
  permisos    RolPermiso[] // Relación muchos a muchos con Permiso
  modulos     Modulo[]     @relation("RolModulo")
}

model Permiso {
  id          Int          @id @default(autoincrement())
  ruta        String
  metodo      String
  descripcion String
  tipo        String       // Ejemplo: "lectura", "escritura", etc.
  modulos     Modulo[]     @relation("ModuloPermiso")
  roles       RolPermiso[] // Relación muchos a muchos con Rol
}

model RolPermiso {
  rolId       Int
  permisoId   Int
  rol         Rol          @relation(fields: [rolId], references: [id])
  permiso     Permiso      @relation(fields: [permisoId], references: [id])

  @@id([rolId, permisoId]) // Llave compuesta
}

model Modulo {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique
  descripcion String
  activo      Boolean    @default(true)
  roles       Rol[]      @relation("RolModulo")
  permisos    Permiso[]  @relation("ModuloPermiso")
}

model Contrato {
  id             Int                @id @default(autoincrement())
  anexo          String
  fecha_contrato DateTime
  activo         Boolean            @default(true)

  clienteId      Int
  cliente        Cliente            @relation(fields: [clienteId], references: [id])

  servicios      ContratoServicio[]
}

model Servicio {
  id          Int                  @id @default(autoincrement())
  servicio    String
  precio      Float
  descripcion String
  tipo_pago   String

  contratos   ContratoServicio[]
}

model ContratoServicio {
  contratoId  Int
  servicioId  Int

  contrato    Contrato             @relation(fields: [contratoId], references: [id])
  servicio    Servicio             @relation(fields: [servicioId], references: [id])

  @@id([contratoId, servicioId])
}

model EquipoCPE {
  id            Int                @id @default(autoincrement())
  img_equipo    String
  nombre_equipo String
  marca         String
  tipo          String
  descripcion   String

  configsAntena ConfigCPE[]        @relation("antena")
  configsRouter ConfigCPE[]        @relation("router")
}

model ConfigCPE {
  id               Int              @id @default(autoincrement())
  user_antena      String
  pass_antena      String
  ip_antena        String
  user_router      String
  pass_admin_router String
  ssid             String
  pass_pin_router  String
  pass_wifi_router String
  lat              String
  clong            String

  clienteId        Int
  cliente          Cliente           @relation(fields: [clienteId], references: [id])

  cpe_antenaId     Int
  cpe_antena       EquipoCPE         @relation("antena", fields: [cpe_antenaId], references: [id])

  cpe_routerId     Int
  cpe_router       EquipoCPE         @relation("router", fields: [cpe_routerId], references: [id])
}

model Movimiento {
  id         Int          @id @default(autoincrement())
  tipocc     String
  anio       Int
  mes        Int
  monto      Float
  concepto   String
  fecha      DateTime     @default(now())
  
  clienteId  Int          // Relación directa con Cliente
  cliente    Cliente      @relation(fields: [clienteId], references: [id]) // Relación inversa hacia Cliente
  
  facturaId  Int
  factura    Factura      @relation(fields: [facturaId], references: [id])
}

model Factura {
  id            Int             @id @default(autoincrement())
  fecha         DateTime        @default(now())
  cancelada     Boolean         @default(false)
  id_cliente    Int
  cliente       Cliente         @relation(fields: [id_cliente], references: [id])
  detalles      DetalleFactura[]
  pagos         PagoCliente[]
  movimiento    Movimiento[]
}

model DetalleFactura {
  id            Int             @id @default(autoincrement())
  id_factura    Int
  factura       Factura          @relation(fields: [id_factura], references: [id])
  concepto      String
  subtotal      Float
}

model PagoCliente {
  id            Int             @id @default(autoincrement())
  id_factura    Int
  factura       Factura          @relation(fields: [id_factura], references: [id])
  anexo         String
  fecha_pago    DateTime
  id_cliente    Int
  cliente       Cliente          @relation(fields: [id_cliente], references: [id])
  alias         String
  nombre_completo String
  contacto      String
  total         Float
  concepto      String
}