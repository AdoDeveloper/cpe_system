{{!-- Hojas de estilo --}}
<link rel="stylesheet" href="/plugins/select2/css/select2.min.css">
{{!-- Incluir Mapbox CSS --}}
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">

<div class="container p-4">
  <div class="row justify-content-center">
    <h1>Crear Nuevo Ticket de Soporte</h1>
  </div>

  <div class="row justify-content-center mt-4">
    <div class="col-md-8">

      <!-- Formulario para crear un nuevo ticket -->
      <form method="POST" action="/tickets/new" enctype="multipart/form-data" id="ticketForm" class="bg-white p-4 rounded shadow-sm">

        <div class="form-group">
          <label for="titulo">Título del Ticket</label>
          <input type="text" class="form-control" name="titulo" id="titulo" placeholder="Título" required autofocus>
        </div>

        <div class="form-group">
          <label for="descripcion">Descripción del Problema</label>
          <textarea class="form-control" name="descripcion" id="descripcion" placeholder="Describe el problema" rows="3"
            required></textarea>
        </div>

        <!-- Campos adicionales para Administrador y Soporte Técnico -->
        {{#if (or (eq user.rol "Administrador") (eq user.rol "Soporte Tecnico"))}}
          <div class="form-group">
            <label for="tipoTicketId">Tipo de Ticket</label>
            <select class="form-control" name="tipoTicketId" id="tipoTicketId">
              <option value="">Selecciona un tipo de ticket</option>
              {{#each tipos}}
                <option value="{{this.id}}" data-nombre="{{this.nombre}}">{{this.nombre}}</option>
              {{/each}}
            </select>
          </div>

          <div class="form-group">
            <label for="clienteId">Cliente a Asignar</label>
            <select class="form-control select2-blue" id="select-cliente" name="clienteId" required>
              <option value="" disabled selected>Seleccione un cliente</option>
              {{#each clientes}}
                <option value="{{this.cliente.id}}">{{this.cliente.nombres}} {{this.cliente.apellidos}}</option>
              {{/each}}
            </select>
          </div>

          <div class="form-group" id="resolverGroup" style="display: none;">
            <label for="resolverId">Usuario a Asignar Resolución</label>
            <select class="form-control select2-blue" name="resolverId" id="select-resolver">
              <option value="" disabled selected>Selecciona un resolutor</option>
              <!-- Opciones se llenarán dinámicamente con JavaScript -->
            </select>
          </div>
        {{/if}}

        <!-- Campos de dirección y coordenadas (mostrados solo para mantenimiento o instalación) -->
        <div id="locationFields" style="display: none;">
          <div class="form-group">
            <label for="direccion">Dirección</label>
            <input type="text" class="form-control" name="direccion" id="direccion" placeholder="Dirección">
          </div>

          <div class="form-group">
            <label for="coordenadas">Coordenadas</label>
            <input type="text" class="form-control" name="coordenadas" id="coordenadas" placeholder="Latitud, Longitud"
              readonly>
          </div>

          <div class="form-group">
            <label>Mueve el marcador para seleccionar la ubicación:</label>
            <div id="map" style="height: 400px;"></div>
          </div>
        </div>

        <div class="form-group">
          {{#if (eq user.rol "Cliente")}}
            <label for="img_problema">Subir Imagen del Problema (opcional)</label>
            <input type="file" class="form-control-file" name="img_problema" id="img_problema" accept="image/*">
          {{else}}
            <label for="img_problema">Subir Imagen o PDF del Ticket</label>
            <input type="file" class="form-control-file" name="img_problema" id="img_problema"
              accept="image/*,application/pdf">
          {{/if}}
        </div>

        <!-- Contenedor para la vista previa del archivo seleccionado -->
        <div class="form-group" id="filePreview" style="display: none;">
          <label>Vista Previa del Archivo:</label><br>
          <img id="previewImage" src="#" alt="Vista Previa de Imagen"
            style="max-width: 100%; height: auto; display: none;">
          <p id="previewText" style="display: none;">Archivo PDF cargado: <span id="pdfName"></span></p>
        </div>

        <div class="form-group row">
          <div class="col-6 pl-1">
            <a href="/tickets" class="btn btn-secondary btn-block">Cancelar</a>
          </div>
          <div class="col-6 pr-1">
            <button class="btn btn-success btn-block" type="submit">Enviar Ticket</button>
          </div>
        </div>

      </form>
    </div>
  </div>
</div>
{{!-- Incluir jQuery --}}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
{{!-- Scripts --}}
<script src="/plugins/select2/js/select2.full.min.js"></script>
<script>
    $('#select-cliente').select2({
      width: '100%'
    });

    $('#select-resolver').select2({
      width: '100%'
    });
</script>

{{!-- Incluir Mapbox JS y otros scripts --}}
{{#if (or (eq user.rol "Administrador") (eq user.rol "Soporte Tecnico"))}}
  <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <script>
    const tipoTicketSelect = document.getElementById('tipoTicketId');
    const resolverGroup = document.getElementById('resolverGroup');
    const resolverSelect = document.getElementById('select-resolver');
    const locationFields = document.getElementById('locationFields');
    const imgProblemaInput = document.getElementById('img_problema');
    const direccionInput = document.getElementById('direccion');
    const coordenadasInput = document.getElementById('coordenadas');
    let mapInitialized = false;
    let marker;
    let direccionModified = false;

    const resolutores = {{{ json resolutores }}};
    const tipos = {{{ json tipos }}};

    tipoTicketSelect.addEventListener('change', function () {
      const selectedTipoId = this.value;
      const selectedTipoOption = this.options[this.selectedIndex];
      const tipoNombre = selectedTipoOption.getAttribute('data-nombre').toLowerCase();

      if (tipoNombre === 'mantenimiento' || tipoNombre === 'instalacion') {
        locationFields.style.display = 'block';
        imgProblemaInput.setAttribute('accept', 'image/*,application/pdf'); // Permitir PDF e imágenes
        if (!mapInitialized) {
          initializeMap();
          mapInitialized = true;
        }
      } else {
        locationFields.style.display = 'none';
        imgProblemaInput.setAttribute('accept', 'image/*'); // Solo permitir imágenes
      }

      const options = resolutores[tipoNombre] || [];
      resolverSelect.innerHTML = '<option value="">Selecciona un resolutor</option>';
      options.forEach(resolver => {
        const option = document.createElement('option');
        option.value = resolver.id;
        option.textContent = resolver.nombre;
        resolverSelect.appendChild(option);
      });

      resolverGroup.style.display = options.length > 0 ? 'block' : 'none';
    });

    function initializeMap() {
      mapboxgl.accessToken = 'pk.eyJ1IjoiYWxleDk3IiwiYSI6ImNqdWZyNm1oazBoYzIzeXBrNDM2NnlyZHEifQ.Wfjlumf_PJzaNUhB9yy29w';
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/satellite-streets-v12',
        center: [-89.70401928084173, 13.770057886610703],
        zoom: 13
      });

      marker = new mapboxgl.Marker({ draggable: true })
        .setLngLat([-89.70401928084173, 13.770057886610703])
        .addTo(map);

      marker.on('dragend', onDragEnd);
      onDragEnd();

      // Opciones de capas en español
      const layerOptions = [
        { id: 'Calles', style: 'mapbox://styles/mapbox/streets-v12' },
        { id: 'Satélite', style: 'mapbox://styles/mapbox/satellite-streets-v12' },
        { id: 'Relieves', style: 'mapbox://styles/mapbox/outdoors-v12' }
      ];

      // Crear el botón de cambio de capa con ícono
      const layerControlButton = document.createElement('button');
      layerControlButton.className = 'mapboxgl-ctrl-icon mapboxgl-ctrl-layer-control';
      layerControlButton.type = 'button';
      layerControlButton.innerHTML = '<i class="fas fa-layer-group"></i>'; // Ícono de capas

      // Crear el menú de selección de capas
      const layerMenu = document.createElement('div');
      layerMenu.className = 'layer-menu';
      layerMenu.style.display = 'none';
      layerMenu.style.position = 'absolute';
      layerMenu.style.backgroundColor = 'white';
      layerMenu.style.border = '1px solid #ccc';
      layerMenu.style.padding = '10px';
      layerMenu.style.borderRadius = '4px';

      // Añadir las opciones de capa al menú
      layerOptions.forEach(option => {
        const layerOption = document.createElement('div');
        layerOption.className = 'layer-option';
        layerOption.style.cursor = 'pointer';
        layerOption.style.padding = '5px';
        layerOption.textContent = option.id;
        layerOption.addEventListener('click', () => {
          map.setStyle(option.style);
          layerMenu.style.display = 'none'; // Cerrar el menú después de seleccionar
        });
        layerMenu.appendChild(layerOption);
      });

      // Alternar la visibilidad del menú al hacer clic en el botón
      layerControlButton.addEventListener('click', () => {
        layerMenu.style.display = layerMenu.style.display === 'none' ? 'block' : 'none';
      });

      // Posicionar el botón y el menú en el lado izquierdo del mapa
      const layerControlContainer = document.createElement('div');
      layerControlContainer.className = 'mapboxgl-ctrl mapboxgl-ctrl-group';
      layerControlContainer.style.position = 'absolute';
      layerControlContainer.style.top = '10px';
      layerControlContainer.style.left = '10px';
      layerControlContainer.style.zIndex = '1';
      layerControlContainer.appendChild(layerControlButton);
      layerControlContainer.appendChild(layerMenu);

      map.getContainer().appendChild(layerControlContainer);
    }

    function onDragEnd() {
      const lngLat = marker.getLngLat();
      coordenadasInput.value = `${lngLat.lat}, ${lngLat.lng}`;
      if (!direccionModified) {
        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lngLat.lng},${lngLat.lat}.json?access_token={{mapboxAccessToken}}`)
          .then(response => response.json())
          .then(data => {
            direccionInput.value = data.features?.[0]?.place_name || 'Dirección no encontrada';
          })
          .catch(() => direccionInput.value = 'Error al obtener la dirección');
      }
    }


    direccionInput.addEventListener('input', () => direccionModified = true);
    direccionInput.addEventListener('change', () => {
      if (direccionInput.value.trim() === '') {
        direccionModified = false;
        onDragEnd();
      }
    });
  </script>
{{/if}}

<script>
  document.getElementById('img_problema').addEventListener('change', function (event) {
    const file = event.target.files[0];
    const previewContainer = document.getElementById('filePreview');
    const previewImage = document.getElementById('previewImage');
    const previewText = document.getElementById('previewText');
    const pdfName = document.getElementById('pdfName');

    if (file) {
      if (file.type.startsWith('image/')) {
        previewImage.src = URL.createObjectURL(file);
        previewImage.style.display = 'block';
        previewText.style.display = 'none';
      } else if (file.type === 'application/pdf') {
        previewImage.style.display = 'none';
        pdfName.textContent = file.name;
        previewText.style.display = 'block';
      }
      previewContainer.style.display = 'block';
    } else {
      previewContainer.style.display = 'none';
    }
  });
</script>