<div class="container p-4">
  <h1 class="text-center">Detalles del Ticket - {{ticket.numeroTicket}}</h1>

  <!-- Información del ticket -->
  <div class="card mt-4">
    <div class="card-body">
      <h4>{{ticket.titulo}}</h4>
      <p><strong>Descripción:</strong> {{ticket.descripcion}}</p>
      <p><strong>Estado:</strong>
        <span id="estadoBadge" class="badge badge-{{#if (eq ticket.estado 'completado')}}success{{else if (eq ticket.estado 'detenido')}}danger{{else}}info{{/if}}">
          {{ticket.estado}}
        </span>
      </p>
      <p><strong>Cliente:</strong> {{ticket.cliente.nombres}} {{ticket.cliente.apellidos}}</p>
      {{#if ticket.img_problema}}
        <p><strong>Imagen del Problema:</strong></p>
        <img src="{{ticket.img_problema}}" alt="Imagen de problema" class="img-thumbnail" width="200">
      {{/if}}
    </div>
  </div>

  <!-- Condicional para tipo de ticket -->
  {{#if (eq ticket.tipoTicket.nombre 'resolucion')}}
    <!-- Timeline de mensajes -->
    <div class="timeline mt-4" id="mensajesContainer">
      {{#each mensajes}}
        <div class="time-label">
          <span class="bg-info">{{formatDate this.createdAt}}</span>
        </div>
        <div>
          <i class="fas fa-comments bg-blue"></i>
          <div class="timeline-item">
            <span class="time"><i class="fas fa-clock"></i> {{formatDate this.createdAt}}</span>
            <h3 class="timeline-header"><strong>{{this.usuario.nombre}}:</strong></h3>
            <div class="timeline-body">
              <p>{{this.mensaje}}</p>
              {{#if this.mediaUrl}}
                <img src="{{this.mediaUrl}}" alt="Imagen adjunta" class="img-thumbnail" width="200">
              {{/if}}
            </div>
          </div>
        </div>
      {{/each}}
    </div>

    <!-- Contenedor para el formulario y mensajes de estado -->
    <div id="messageArea">
      {{!-- Se renderiza inicialmente el formulario o mensaje según el estado --}}
      {{#if (eq ticket.estado 'en_revision')}}
        <div class="mt-4" id="messageFormContainer">
          <h4>Enviar Mensaje</h4>
          <form id="messageForm">
            <div class="form-group">
              <label for="mensaje">Mensaje</label>
              <textarea id="mensaje" name="mensaje" class="form-control" rows="3" required></textarea>
            </div>
            <div class="form-group">
              <label for="media">Adjuntar Imagen (opcional)</label>
              <input type="file" class="form-control-file" name="media" id="media" accept="image/*">
              <img id="previewImage" src="#" alt="Vista previa" class="img-thumbnail mt-2" style="display: none;" width="200">
            </div>
            <button type="submit" class="btn btn-primary">Enviar</button>
          </form>
        </div>
      {{else}}
        {{#if (eq ticket.estado 'completado')}}
          <div class="alert alert-success mt-4" id="completedMessage">
            <strong>Ticket Completado:</strong> No es posible enviar más mensajes en este ticket.
          </div>
        {{else if (eq ticket.estado 'detenido')}}
          <div class="alert alert-warning mt-4" id="pausedMessage">
            <strong>Ticket Detenido:</strong> Mensajería deshabilitada temporalmente.
          </div>
        {{else if (eq ticket.estado 'enviado')}}
          <div class="alert alert-info mt-4" id="sentMessage">
            <strong>Ticket Enviado:</strong> Esperando revisión. La mensajería no está disponible.
          </div>
        {{/if}}
      {{/if}}
    </div>
  {{else}}
    <!-- Mostrar información para mantenimiento o instalación -->
    <div class="mt-4">
      <h4>Información del Cliente</h4>
      <p><strong>Dirección:</strong> {{ticket.direccion}}</p>
      <!-- Mapa de ubicación -->
      <div id="map" style="height: 400px;"></div>
      <!-- Botón para iniciar ruta en Google Maps -->
      <a href="https://www.google.com/maps/dir/?api=1&destination={{ticket.latitud}},{{ticket.longitud}}" target="_blank" class="btn btn-success mt-3">
        Iniciar Ruta en Google Maps
      </a>
    </div>
  {{/if}}

  <!-- Permitir a técnicos e instaladores actualizar el estado del ticket -->
  {{#if (or (eq user.rol 'Tecnico') (eq user.rol 'Instalador') (eq user.rol 'Soporte Tecnico') (eq user.rol 'Administrador') )}}
    <div class="mt-4">
      <h4>Actualizar Estado del Ticket</h4>
      <form action="/tickets/{{ticket.id}}/updatestatus?_method=PUT" method="POST" id="alertFormEdit">
        <div class="form-group">
          <label for="estado">Estado</label>
          <select id="estado" name="estado" class="form-control" required>
            <option value="enviado" {{#if (eq ticket.estado 'enviado')}}selected{{/if}}>Enviado</option>
            <option value="en_revision" {{#if (eq ticket.estado 'en_revision')}}selected{{/if}}>En revisión</option>
            <option value="detenido" {{#if (eq ticket.estado 'detenido')}}selected{{/if}}>Detenido</option>
            <option value="completado" {{#if (eq ticket.estado 'completado')}}selected{{/if}}>Completado</option>
          </select>
        </div>
        <button type="submit" class="btn btn-primary">Actualizar Estado</button>
      </form>
    </div>
  {{/if}}
</div>

<!-- Incluir scripts necesarios -->
<script src="/socket.io/socket.io.js"></script> <!-- Script de Socket.IO -->
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />

<script>
  // Mostrar el mapa si es mantenimiento o instalación
  {{#unless (eq ticket.tipoTicket.nombre 'resolucion')}}
    mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';
    const lat = parseFloat('{{ticket.latitud}}');
    const lng = parseFloat('{{ticket.longitud}}');

    const map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [lng, lat],
      zoom: 14
    });

    new mapboxgl.Marker()
      .setLngLat([lng, lat])
      .addTo(map);
  {{/unless}}

  // Configuración de Socket.IO
  const socket = io();

  // Unirse a la sala específica del ticket
  socket.emit('joinTicket', { ticketId: {{ticket.id}} });

  // Función para actualizar la interfaz de acuerdo al estado
  function updateMessageFormAndStatus(newState) {
    const messageArea = document.getElementById('messageArea');
    const estadoBadge = document.getElementById('estadoBadge');

    // Actualizar el estado visualmente
    if (estadoBadge) {
      estadoBadge.textContent = newState;
      estadoBadge.className = `badge badge-${newState === 'completado' ? 'success' : newState === 'detenido' ? 'danger' : 'info'}`;
    }

    // Limpiar el área de mensajes
    messageArea.innerHTML = '';

    if (newState === 'en_revision') {
      // Crear el formulario nuevamente
      const formContainer = document.createElement('div');
      formContainer.classList.add('mt-4');
      formContainer.id = 'messageFormContainer';
      formContainer.innerHTML = `
        <h4>Enviar Mensaje</h4>
        <form id="messageForm">
          <div class="form-group">
            <label for="mensaje">Mensaje</label>
            <textarea id="mensaje" name="mensaje" class="form-control" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="media">Adjuntar Imagen (opcional)</label>
            <input type="file" class="form-control-file" name="media" id="media" accept="image/*">
            <img id="previewImage" src="#" alt="Vista previa" class="img-thumbnail mt-2" style="display: none;" width="200">
          </div>
          <button type="submit" class="btn btn-primary">Enviar</button>
        </form>
      `;
      messageArea.appendChild(formContainer);

      // Asociar eventos al nuevo formulario
      setupMessageForm();
    } else {
      // Mostrar el mensaje correspondiente
      const alertDiv = document.createElement('div');
      alertDiv.classList.add('alert', 'mt-4');

      if (newState === 'completado') {
        alertDiv.classList.add('alert-success');
        alertDiv.id = 'completedMessage';
        alertDiv.innerHTML = '<strong>Ticket Completado:</strong> No es posible enviar más mensajes en este ticket.';
      } else if (newState === 'detenido') {
        alertDiv.classList.add('alert-warning');
        alertDiv.id = 'pausedMessage';
        alertDiv.innerHTML = '<strong>Ticket Detenido:</strong> Mensajería deshabilitada temporalmente.';
      } else if (newState === 'enviado') {
        alertDiv.classList.add('alert-info');
        alertDiv.id = 'sentMessage';
        alertDiv.innerHTML = '<strong>Ticket Enviado:</strong> Esperando revisión. La mensajería no está disponible.';
      }

      messageArea.appendChild(alertDiv);
    }
  }

  // Escuchar eventos de socket para los diferentes estados del ticket
  socket.on('ticketStatusChanged', function(data) {
    const { newState } = data;
    updateMessageFormAndStatus(newState);
  });

  // Función para configurar el formulario de mensajes
  function setupMessageForm() {
    const messageForm = document.getElementById('messageForm');
    const mediaInput = document.getElementById('media');
    const previewImage = document.getElementById('previewImage');

    if (messageForm) {
      messageForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const mensaje = document.getElementById('mensaje').value;
        const userId = {{user.id}};
        const ticketId = {{ticket.id}};

        if (mediaInput.files.length > 0) {
          const file = mediaInput.files[0];
          if (!file.type.match('image.*')) {
            alert('Solo se permiten imágenes.');
            return;
          }
          const reader = new FileReader();
          reader.onload = function(e) {
            const imageData = e.target.result.split(',')[1];
            socket.emit('sendMessage', { ticketId, userId, mensaje, imageData });
          };
          reader.readAsDataURL(file);
        } else {
          socket.emit('sendMessage', { ticketId, userId, mensaje });
        }
        messageForm.reset();
        previewImage.style.display = 'none';
      });
    }

    // Mostrar vista previa de la imagen seleccionada
    if (mediaInput) {
      mediaInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file && file.type.match('image.*')) {
          const reader = new FileReader();
          reader.onload = function(e) {
            previewImage.src = e.target.result;
            previewImage.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          previewImage.src = '#';
          previewImage.style.display = 'none';
        }
      });
    }
  }

  // Inicializar el formulario al cargar la página
  setupMessageForm();

  // Escuchar nuevos mensajes
  socket.on('newMessage', function(data) {
    // Actualizar la vista con el nuevo mensaje
    const mensajesContainer = document.getElementById('mensajesContainer');
    const mensaje = data.mensaje;

    // Crear elementos del mensaje
    const timeLabel = document.createElement('div');
    timeLabel.classList.add('time-label');
    const timeSpan = document.createElement('span');
    timeSpan.classList.add('bg-info');
    timeSpan.innerText = new Date(mensaje.createdAt).toLocaleString();
    timeLabel.appendChild(timeSpan);

    const messageDiv = document.createElement('div');
    const icon = document.createElement('i');
    icon.classList.add('fas', 'fa-comments', 'bg-blue');
    const timelineItem = document.createElement('div');
    timelineItem.classList.add('timeline-item');

    const time = document.createElement('span');
    time.classList.add('time');
    time.innerHTML = `<i class="fas fa-clock"></i> ${new Date(mensaje.createdAt).toLocaleString()}`;
    const header = document.createElement('h3');
    header.classList.add('timeline-header');
    header.innerHTML = `<strong>${mensaje.usuario.nombre}:</strong>`;
    const body = document.createElement('div');
    body.classList.add('timeline-body');
    body.innerHTML = `<p>${mensaje.mensaje}</p>`;

    // Añadir media si existe
    if (mensaje.mediaUrl) {
      const img = document.createElement('img');
      img.src = mensaje.mediaUrl;
      img.alt = 'Imagen adjunta';
      img.classList.add('img-thumbnail');
      img.width = 200;
      body.appendChild(img);
    }

    timelineItem.appendChild(time);
    timelineItem.appendChild(header);
    timelineItem.appendChild(body);

    messageDiv.appendChild(icon);
    messageDiv.appendChild(timelineItem);

    // Añadir los elementos al contenedor de mensajes
    mensajesContainer.appendChild(timeLabel);
    mensajesContainer.appendChild(messageDiv);

    // Hacer scroll hacia el último mensaje
    mensajesContainer.scrollTop = mensajesContainer.scrollHeight;
  });

  // Escuchar mensajes de error
  socket.on('errorMessage', function(message) {
    alert(message);
  });
</script>
